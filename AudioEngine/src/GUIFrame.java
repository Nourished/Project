/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

// https://sites.google.com/site/musicgapi/home - MUSICG jar
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Eric
 */
public class GUIFrame extends javax.swing.JFrame {

    AudioStream AS = new AudioStream();
    Envelope es = new Envelope();
    File tempSongFile, tempTxtFile, originalSong;
    double[] envelope = null;
    SoundRecord audioData = new SoundRecord();

    /**
     * Creates new form GUIFrame
     */
    public GUIFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        envelopebuttonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        ButtonPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        grainPanel = new javax.swing.JPanel();
        durationLabel = new javax.swing.JLabel();
        durationSetting = new javax.swing.JTextField();
        locationSlider = new javax.swing.JSlider();
        pitchSetting = new javax.swing.JTextField();
        amplitudeSetting = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        locationSetting = new javax.swing.JTextField();
        pitchSlider = new javax.swing.JSlider();
        durationSlider = new javax.swing.JSlider();
        amplitudeSlider = new javax.swing.JSlider();
        offsetSlider = new javax.swing.JSlider();
        grainLabel = new javax.swing.JLabel();
        pitchLabel = new javax.swing.JLabel();
        offsetLabel = new javax.swing.JLabel();
        amplitudeLabel = new javax.swing.JLabel();
        offsetSetting = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        hannButton = new javax.swing.JRadioButton();
        breakpointButton = new javax.swing.JRadioButton();
        gaussianButton = new javax.swing.JRadioButton();
        envelopeLabel = new javax.swing.JLabel();
        sinButton = new javax.swing.JRadioButton();
        hammingButton = new javax.swing.JRadioButton();
        arButton = new javax.swing.JRadioButton();
        adsrButton = new javax.swing.JRadioButton();
        applyEnvelopeButton = new javax.swing.JButton();
        arTF = new javax.swing.JFormattedTextField();
        arTF1 = new javax.swing.JFormattedTextField();
        adsrTF = new javax.swing.JFormattedTextField();
        adsrTF1 = new javax.swing.JFormattedTextField();
        adsrTF2 = new javax.swing.JFormattedTextField();
        adsrTF3 = new javax.swing.JFormattedTextField();
        bpTF = new javax.swing.JFormattedTextField();
        bpTF1 = new javax.swing.JFormattedTextField();
        bpTF2 = new javax.swing.JFormattedTextField();
        bpTF3 = new javax.swing.JFormattedTextField();
        resetButton = new javax.swing.JButton();
        testLoadButton = new javax.swing.JButton();
        txtWavButton = new javax.swing.JButton();
        outputButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        quit = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();
        lMenu = new javax.swing.JMenu();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\Eric\\Documents\\Word Documents\\COSC\\4P98\\Project\\Audio Engine\\src"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        playButton.setText("Play");
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ButtonPanelLayout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ButtonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pauseButton, playButton, stopButton});

        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(pauseButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ButtonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pauseButton, playButton, stopButton});

        durationLabel.setText("Duration");

        durationSetting.setText("50");

        locationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                locationSliderStateChanged(evt);
            }
        });

        pitchSetting.setText("50");

        amplitudeSetting.setText("50");

        locationLabel.setText("Location");

        locationSetting.setText("50");

        pitchSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pitchSliderStateChanged(evt);
            }
        });

        durationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durationSliderStateChanged(evt);
            }
        });

        amplitudeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amplitudeSliderStateChanged(evt);
            }
        });

        offsetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSliderStateChanged(evt);
            }
        });

        grainLabel.setText("Grain Settings");

        pitchLabel.setText("Pitch");

        offsetLabel.setText("Offset");

        amplitudeLabel.setText("Amplitude");

        offsetSetting.setText("50");

        javax.swing.GroupLayout grainPanelLayout = new javax.swing.GroupLayout(grainPanel);
        grainPanel.setLayout(grainPanelLayout);
        grainPanelLayout.setHorizontalGroup(
            grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(grainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(durationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(durationSetting))
                    .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, grainPanelLayout.createSequentialGroup()
                            .addComponent(locationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(locationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(locationSetting))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, grainPanelLayout.createSequentialGroup()
                            .addComponent(offsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(offsetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(offsetSetting))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, grainPanelLayout.createSequentialGroup()
                            .addComponent(amplitudeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amplitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(amplitudeSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, grainPanelLayout.createSequentialGroup()
                            .addComponent(pitchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pitchSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        grainPanelLayout.setVerticalGroup(
            grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addComponent(grainLabel)
                        .addGap(18, 18, 18)
                        .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(durationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(durationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(durationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(amplitudeSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(amplitudeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(amplitudeSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pitchSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(pitchLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pitchSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(offsetSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(offsetLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(offsetSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(locationSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(locationLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(locationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        grainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {durationLabel, durationSlider});

        envelopebuttonGroup.add(hannButton);
        hannButton.setText("Hann");
        hannButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hannButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(breakpointButton);
        breakpointButton.setText("Breakpoint");
        breakpointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakpointButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(gaussianButton);
        gaussianButton.setText("Gaussian");
        gaussianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianButtonActionPerformed(evt);
            }
        });

        envelopeLabel.setText("Envelope Settings");

        envelopebuttonGroup.add(sinButton);
        sinButton.setText("Sine");
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(hammingButton);
        hammingButton.setText("Hamming");
        hammingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hammingButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(arButton);
        arButton.setText("Attack and Release");
        arButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(adsrButton);
        adsrButton.setText("Attack Decay Sustain Release");
        adsrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adsrButtonActionPerformed(evt);
            }
        });

        applyEnvelopeButton.setText("Apply Envelope");
        applyEnvelopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyEnvelopeButtonActionPerformed(evt);
            }
        });

        arTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        arTF.setEnabled(false);

        arTF1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        arTF1.setEnabled(false);

        adsrTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF.setEnabled(false);

        adsrTF1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF1.setEnabled(false);

        adsrTF2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF2.setEnabled(false);

        adsrTF3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF3.setEnabled(false);

        bpTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        bpTF.setEnabled(false);

        bpTF1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        bpTF1.setEnabled(false);

        bpTF2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        bpTF2.setEnabled(false);

        bpTF3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        bpTF3.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(envelopeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hannButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hammingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gaussianButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adsrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(breakpointButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyEnvelopeButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(arTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(arTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(adsrTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bpTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bpTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bpTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bpTF3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(envelopeLabel)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sinButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hannButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(applyEnvelopeButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hammingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gaussianButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arButton)
                    .addComponent(arTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adsrButton)
                    .addComponent(adsrTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breakpointButton)
                    .addComponent(bpTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpTF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        resetButton.setText("Reset to loaded Song");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        testLoadButton.setText("Load Song");
        testLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testLoadButtonActionPerformed(evt);
            }
        });

        txtWavButton.setText("Test txt2wav");
        txtWavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWavButtonActionPerformed(evt);
            }
        });

        outputButton.setText("Output to text file");
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        fileMenu.add(save);

        saveAs.setText("Save As");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        fileMenu.add(saveAs);

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        fileMenu.add(open);

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        fileMenu.add(quit);

        jMenuBar1.add(fileMenu);

        optionsMenu.setText("Options");
        jMenuBar1.add(optionsMenu);

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        lMenu.setText("Else");
        jMenuBar1.add(lMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(grainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resetButton)
                            .addComponent(outputButton))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testLoadButton)
                            .addComponent(txtWavButton))))
                .addContainerGap(214, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetButton)
                            .addComponent(testLoadButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWavButton)
                            .addComponent(outputButton))))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(grainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".wav", "wav");
        fileChooser.addChoosableFileFilter(filter);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter fw = new FileWriter(fileChooser.getSelectedFile());
                String newPath = fileChooser.getSelectedFile().getAbsolutePath();
                System.out.println("File path = " + newPath);
                File tempAudio = new File(tempSongFile.getAbsolutePath());
                System.out.println("File path of tempAudio = " + tempAudio.getAbsolutePath());

                if (tempAudio.renameTo(new File(newPath))) {
                    System.out.println("File saved successful!");
                } else {
                    System.out.println("File failed to save!");
                }
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveAsActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

        AS.killALData();
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".wav", "wav");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            originalSong = fileChooser.getSelectedFile();
            try {

                tempSongFile = originalSong;
                AS.execute(tempSongFile);

            } catch (Exception ex) {
                System.out.println("Problem accessing file " + tempSongFile.getAbsolutePath());
            }

            // Convert the .wav file to a text file
            tempTxtFile = audioToTxt(tempSongFile);

            // read the text file into the sound file
            readFile(tempTxtFile, audioData);


            playButton.setEnabled(true);
            pauseButton.setEnabled(true);
            stopButton.setEnabled(true);
            // Update duration slider to song duration
            durationSlider.setMaximum((int) (audioData.samples / audioData.sampleRate));

            //  txtToAudio(tempTxtFile);
        } else {
            System.out.println("File access cancelled by user.");
        }


    }//GEN-LAST:event_openActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        // TODO add your handling code here:
        // Kill the song buffer if something is loaded        
        AS.killALData();

        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed

    private void durationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationSliderStateChanged
        // TODO add your handling code here:
        durationSetting.setText("" + durationSlider.getValue());
    }//GEN-LAST:event_durationSliderStateChanged

    private void amplitudeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amplitudeSliderStateChanged
        // TODO add your handling code here:
        amplitudeSetting.setText("" + amplitudeSlider.getValue());
    }//GEN-LAST:event_amplitudeSliderStateChanged

    private void pitchSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pitchSliderStateChanged
        // TODO add your handling code here:
        pitchSetting.setText("" + pitchSlider.getValue());
    }//GEN-LAST:event_pitchSliderStateChanged

    private void offsetSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSliderStateChanged
        // TODO add your handling code here:
        offsetSetting.setText("" + offsetSlider.getValue());
    }//GEN-LAST:event_offsetSliderStateChanged

    private void locationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_locationSliderStateChanged
        // TODO add your handling code here:
        locationSetting.setText("" + locationSlider.getValue());
    }//GEN-LAST:event_locationSliderStateChanged

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // Play if a song is loaded
        if (AS.status()) {
            AS.play();
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // Pause if a song is loaded
        if (AS.status()) {
            AS.pause();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // Stop if a song is loaded
        if (AS.status()) {
            AS.stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        // Close song buffer if a song is loaded        
        AS.killALData();

    }//GEN-LAST:event_formWindowClosing


    /* void audioToTxt(String fileName)
     ------SONG MUST BE LOADED FIRST!
     */
    File audioToTxt(File file) {

        String fileName = file.getName();

        fileName = fileName.substring(0, fileName.lastIndexOf("."));

        String base = System.getProperty("user.dir") + "\\src\\music\\";

        String cmd = "\"\"" + base + "wav2txt\" " + "\""
                + file.getAbsolutePath() + "\"" + " > " + "\""
                + base + fileName + ".txt" + "\"\"";

        try {
            Process p = Runtime.getRuntime().exec(
                    new String[]{"cmd.exe", "/c", cmd});
            System.out
                    .println("Txt file constructed: /src/music/" + fileName + ".txt");
            p.waitFor();
        } catch (Exception ex) {
            System.out.println("FAILED: " + ex.getMessage());

        }

        File txtFile = new File(base + fileName + ".txt");

        return txtFile;

    }//End of audioToTxt

    /* void txtToAudio(String fileName)    
     */
    void txtToAudio(String fileName) {

        fileName = fileName.substring(0, fileName.lastIndexOf("."));
        String base = System.getProperty("user.dir") + "\\src\\music\\";

        String cmd = "\"\"" + base + "txt2wav\" " + "\"" + base + fileName
                + ".wav\" < " + "\"" + base + fileName + ".txt\"\"";

        try {
            Process p = Runtime.getRuntime().exec(
                    new String[]{"cmd.exe", "/c", cmd});
            System.out.println("Wav file constructed: \\src\\music\\" + fileName + ".wav");
            p.waitFor();
        } catch (Exception ex) {
            System.out.println("FAILED: " + ex.getMessage());

        }
    }//End of txtToAudio

    /* readFile(String fileName, SoundRecord record)
     */
    void readFile(File txtFile, SoundRecord record) {

        try {
            Scanner scanner = new Scanner(new File(txtFile.getAbsolutePath()));
            int count = 0;
            scanner.next();
            record.samples = scanner.nextInt();
            scanner.next();
            record.bitsPerSample = scanner.nextInt();
            scanner.next();
            record.channels = scanner.nextInt();
            scanner.next();
            record.sampleRate = scanner.nextInt();
            scanner.next();
            record.normalized = false;
            scanner.next();

            if (record.channels == 1) {
                record.channelOne = new int[record.samples];
            } else {
                record.channelOne = new int[record.samples];
                record.channelTwo = new int[record.samples];
            }

            while (scanner.hasNextInt()) {
                //  data[count] = line;
                if (record.channels == 1) {
                    int line = scanner.nextInt();
                    record.channelOne[count] = line;
                    //System.out.printf("%s %n", record.channelOne[count]);
                    count++;
                } else {

                    int line1 = scanner.nextInt();
                    record.channelOne[count] = line1;
                    int line2 = scanner.nextInt();
                    record.channelTwo[count] = line2;
                    //System.out.printf("--- %s \t %s %n",
                    //        record.channelOne[count], record.channelTwo[count]);
                    count++;
                }
            }
            scanner.close();

        } catch (Exception e) {
            System.out.println("ERROR");
        }

    }//End of readFile

    /* outputFile(String fileName, SoundRecord record)     
     */
    void outputTxtFile(String fileName, SoundRecord record) {

        String base = System.getProperty("user.dir") + "\\src\\music\\";

        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(base + fileName));
            out.write("SAMPLES: \t" + record.channelOne.length);
            out.newLine();
            out.write("BITSPERSAMPLE: \t" + record.bitsPerSample);
            out.newLine();
            out.write("CHANNELS: \t" + record.channels);
            out.newLine();
            out.write("SAMPLERATE: \t" + record.sampleRate);
            out.newLine();
            out.write("NORMALIZED: \t" + "FALSE");
            out.newLine();
            int line1 = 0, line2 = 0;
            if (record.channels == 1) {
                for (int i = 0; i < record.channelOne.length; i++) {
                    out.write(record.channelOne[i] + "\n");
                }
            } else {
                for (int i = 0; i < record.channelOne.length; i++) {
                    line1 = record.channelOne[i];
                    line2 = record.channelTwo[i];
                    out.write(line1 + "\t");
                    out.write(line2 + "\n");
                }
            }

            out.close();
            System.out.println("Successfully created " + fileName);
        } catch (Exception e) {
            System.out.println("Error outputing the file " + fileName);
        }

    } //End of outPutFile

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        AS.killALData();
        
        try {
            AS.execute(originalSong);

        } catch (Exception ex) {
            System.out.println("Problem accessing file " + originalSong.getAbsolutePath());
        }

        // Convert the .wav file to a text file
        tempTxtFile = audioToTxt(originalSong);

        // read the text file into the sound file
        readFile(tempTxtFile, audioData);
        
        durationSlider.setMaximum((int) (audioData.samples / audioData.sampleRate));
    }//GEN-LAST:event_resetButtonActionPerformed

    private void testLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testLoadButtonActionPerformed
        // TODO add your handling code here:
        AS.killALData();

        tempSongFile = new File("src\\FancyPants.wav");
        AS.execute(tempSongFile);

        tempTxtFile = audioToTxt(tempSongFile);

        readFile(tempTxtFile, audioData);

        playButton.setEnabled(true);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
    }//GEN-LAST:event_testLoadButtonActionPerformed

    private void txtWavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWavButtonActionPerformed
        // TODO add your handling code here:

        String fileName = "austin.txt";
        txtToAudio(fileName);


    }//GEN-LAST:event_txtWavButtonActionPerformed

    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        // TODO add your handling code here:
        outputTxtFile("new.txt", audioData);
    }//GEN-LAST:event_outputButtonActionPerformed

    private void applyEnvelopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyEnvelopeButtonActionPerformed
        // TODO add your handling code here:

        // Nothing loaded
        if(!AS.status())
            return;
                    
        int type = 0;
        if (sinButton.isSelected()) {
            type = 1;
        } else if (hannButton.isSelected()) {
            type = 2;
        } else if (hammingButton.isSelected()) {
            type = 3;
        } else if (gaussianButton.isSelected()) {
            type = 4;
        } else if (arButton.isSelected()) {
            type = 5;
        } else if (adsrButton.isSelected()) {
            type = 6;
        } else if (breakpointButton.isSelected()) {
            type = 7;
        }
        
        if (type == 0){ // none
            System.out.println("No envelope set");
            return;
        }
        SoundRecord audio = new SoundRecord();
        audio.bitsPerSample = audioData.bitsPerSample;
        audio.channels = audioData.channels;
        audio.normalized = audioData.normalized;
        audio.samples = audioData.samples;
        audio.sampleRate = audioData.sampleRate;
        double[] envelope = null;

        System.out.println(tempSongFile.getName());
        String fileName = AS.getSongFileName();
        //for(int i = 0 ; i < audio.samples ; i++ ){
        //   System.out.println(audio.channelOne[i]);
        // }

        //  es.readFile(fileName, audio); // read file in
        //  double[] envelope = new double[2 * audio.sampleRate];
        //
        //
        
        int eDur = durationSlider.getValue(), eAmp = amplitudeSlider.getValue(),
                ePitch = pitchSlider.getValue(), eOffset = offsetSlider.getValue(),
                eLocation = locationSlider.getValue();

        double[] values = new double [4];
        switch (type) {
            
            case 1: // Sin
                envelope = es.sinEnvelope(audio, eDur);
                break;

            case 2: // Hann
                envelope = es.hannEnvelope(audio, eDur);
                break;
            case 3: // Hamming
                envelope = es.hammEnvelope(audio, eDur);
                break;

            case 4: // Gaussian
                envelope = es.gaussianEnvelope(audio, 2, 0.3);

                break;
            case 5: // AR
                values[0] = Double.parseDouble(arTF.getText());
                values[1] = Double.parseDouble(arTF1.getText());

                break;

            case 6: // ADSR
                values[0] = Double.parseDouble(adsrTF.getText());
                values[1] = Double.parseDouble(adsrTF1.getText());
                values[2] = Double.parseDouble(adsrTF2.getText());
                values[3] = Double.parseDouble(adsrTF3.getText());
                System.out.println(values[0]);
                envelope = es.adsrEnvelope(audio, 2, values[0], values[1], 
                                                    values[2], values[3]);
                break;
            case 7: // Breakpoint
                values[0] = Double.parseDouble(bpTF.getText());
                values[1] = Double.parseDouble(bpTF1.getText());
                values[2] = Double.parseDouble(bpTF2.getText());
                values[3] = Double.parseDouble(bpTF3.getText());
                break;

            case 8:

                break;

        }
        
        audio.channelOne = new int[audio.samples];
        audio.channelTwo = new int[audio.samples];
        // Apply the envelope values to a text file and then create the wav file
        for (int i = 0; i < envelope.length; i++) {
            //System.out.println(envelope[i]);
            audio.channelOne[i] = (int) (audioData.channelOne[i] * envelope[i]);
            if (audio.channels == 2) {
                audio.channelTwo[i] = (int) (audioData.channelTwo[i] * envelope[i]);
            }
        }
        
        outputTxtFile("tempEnvelope.txt", audio);
        txtToAudio("tempEnvelope.txt");
        
        //Load it
        AS.killALData();
        AS.execute(new File("src\\Music\\tempEnvelope.wav"));

    }//GEN-LAST:event_applyEnvelopeButtonActionPerformed

    private void adsrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adsrButtonActionPerformed
        // TODO add your handling code here:
        // Enable text

        // ADSR
        adsrTF.setEnabled(true);
        adsrTF1.setEnabled(true);
        adsrTF2.setEnabled(true);
        adsrTF3.setEnabled(true);

        // Disable other texts
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);

        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_adsrButtonActionPerformed

    private void arButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arButtonActionPerformed
        // TODO add your handling code here:
        // Enable text
        arTF.setEnabled(true);
        arTF1.setEnabled(true);;
        // Disable other texts
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);

        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_arButtonActionPerformed

    private void hammingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hammingButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);
        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_hammingButtonActionPerformed

    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);
        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_sinButtonActionPerformed

    private void gaussianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);
        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_gaussianButtonActionPerformed

    private void breakpointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakpointButtonActionPerformed
        // TODO add your handling code here:
        // Enable text
        // Breakpoint
        bpTF.setEnabled(true);
        bpTF1.setEnabled(true);
        bpTF2.setEnabled(true);
        bpTF3.setEnabled(true);

        // Disable other texts
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);
    }//GEN-LAST:event_breakpointButtonActionPerformed

    private void hannButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hannButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
        // Attack Release
        arTF.setEnabled(false);
        arTF1.setEnabled(false);
        // Breakpoint
        bpTF.setEnabled(false);
        bpTF1.setEnabled(false);
        bpTF2.setEnabled(false);
        bpTF3.setEnabled(false);
    }//GEN-LAST:event_hannButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUIFrame().setVisible(true);

            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JRadioButton adsrButton;
    private javax.swing.JFormattedTextField adsrTF;
    private javax.swing.JFormattedTextField adsrTF1;
    private javax.swing.JFormattedTextField adsrTF2;
    private javax.swing.JFormattedTextField adsrTF3;
    private javax.swing.JLabel amplitudeLabel;
    private javax.swing.JTextField amplitudeSetting;
    private javax.swing.JSlider amplitudeSlider;
    private javax.swing.JButton applyEnvelopeButton;
    private javax.swing.JRadioButton arButton;
    private javax.swing.JFormattedTextField arTF;
    private javax.swing.JFormattedTextField arTF1;
    private javax.swing.JFormattedTextField bpTF;
    private javax.swing.JFormattedTextField bpTF1;
    private javax.swing.JFormattedTextField bpTF2;
    private javax.swing.JFormattedTextField bpTF3;
    private javax.swing.JRadioButton breakpointButton;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationSetting;
    private javax.swing.JSlider durationSlider;
    private javax.swing.JLabel envelopeLabel;
    private javax.swing.ButtonGroup envelopebuttonGroup;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton gaussianButton;
    private javax.swing.JLabel grainLabel;
    private javax.swing.JPanel grainPanel;
    private javax.swing.JRadioButton hammingButton;
    private javax.swing.JRadioButton hannButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu lMenu;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationSetting;
    private javax.swing.JSlider locationSlider;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JTextField offsetSetting;
    private javax.swing.JSlider offsetSlider;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton outputButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JTextField pitchSetting;
    private javax.swing.JSlider pitchSlider;
    private javax.swing.JButton playButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quit;
    private javax.swing.JButton resetButton;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JRadioButton sinButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testLoadButton;
    private javax.swing.JButton txtWavButton;
    // End of variables declaration//GEN-END:variables
}
