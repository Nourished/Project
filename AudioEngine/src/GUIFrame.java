/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

// https://sites.google.com/site/musicgapi/home - MUSICG jar
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Eric
 */
public class GUIFrame extends javax.swing.JFrame {

    AudioStream AS = new AudioStream();
    Envelope es = new Envelope();
    File tempSongFile, tempTxtFile, originalSong;
    double[] envelope = null;
    SoundRecord audioData = new SoundRecord();

    /**
     * Creates new form GUIFrame
     */
    public GUIFrame() {
        initComponents();

        // Setup sliders
        durationSetting.setText(String.valueOf(durationSlider.getValue()));
        cloudDurationSetting.setText(String.valueOf(cloudDurationSlider.getValue()));
        pitchSetting.setText(String.valueOf(pitchSlider.getValue()));
        amplitudeSetting.setText(String.valueOf(amplitudeSlider.getValue()));
        offsetSetting.setText(String.valueOf(offsetSlider.getValue()));
        locationSetting.setText(String.valueOf(locationSlider.getValue()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        envelopebuttonGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        ButtonPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        grainPanel = new javax.swing.JPanel();
        durationLabel = new javax.swing.JLabel();
        durationSetting = new javax.swing.JTextField();
        locationSlider = new javax.swing.JSlider();
        pitchSetting = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        locationSetting = new javax.swing.JTextField();
        pitchSlider = new javax.swing.JSlider();
        durationSlider = new javax.swing.JSlider();
        offsetSlider = new javax.swing.JSlider();
        grainLabel = new javax.swing.JLabel();
        pitchLabel = new javax.swing.JLabel();
        offsetLabel = new javax.swing.JLabel();
        amplitudeLabel = new javax.swing.JLabel();
        offsetSetting = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cloudDurationSlider = new javax.swing.JSlider();
        cloudDurationSetting = new javax.swing.JTextField();
        amplitudeSlider = new javax.swing.JSlider();
        amplitudeSetting = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        hannButton = new javax.swing.JRadioButton();
        gaussianButton = new javax.swing.JRadioButton();
        envelopeLabel = new javax.swing.JLabel();
        sinButton = new javax.swing.JRadioButton();
        hammingButton = new javax.swing.JRadioButton();
        adsrButton = new javax.swing.JRadioButton();
        applyEnvelopeButton = new javax.swing.JButton();
        adsrTF = new javax.swing.JFormattedTextField();
        adsrTF1 = new javax.swing.JFormattedTextField();
        adsrTF2 = new javax.swing.JFormattedTextField();
        adsrTF3 = new javax.swing.JFormattedTextField();
        gaussianField = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTF = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        testLoadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        quit = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\Eric\\Documents\\Word Documents\\COSC\\4P98\\Project\\Audio Engine\\src"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ButtonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 0)));

        playButton.setText("Play");
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ButtonPanelLayout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ButtonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pauseButton, playButton, stopButton});

        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(pauseButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ButtonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pauseButton, playButton, stopButton});

        grainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 204, 204)));

        durationLabel.setText("Duration");

        locationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                locationSliderStateChanged(evt);
            }
        });

        locationLabel.setText("Location");

        pitchSlider.setMaximum(440);
        pitchSlider.setMinimum(10);
        pitchSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pitchSliderStateChanged(evt);
            }
        });

        durationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                durationSliderStateChanged(evt);
            }
        });

        offsetSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSliderStateChanged(evt);
            }
        });

        grainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grainLabel.setText("Grain Settings");

        pitchLabel.setText("Pitch");

        offsetLabel.setText("Offset");

        amplitudeLabel.setText("Amplitude");

        jLabel1.setText("Cloud Duration");

        cloudDurationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cloudDurationSliderStateChanged(evt);
            }
        });

        amplitudeSlider.setMaximum(10);
        amplitudeSlider.setMinimum(1);
        amplitudeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amplitudeSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout grainPanelLayout = new javax.swing.GroupLayout(grainPanel);
        grainPanel.setLayout(grainPanelLayout);
        grainPanelLayout.setHorizontalGroup(
            grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grainPanelLayout.createSequentialGroup()
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cloudDurationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cloudDurationSetting))
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(durationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(durationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(locationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(locationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(locationSetting))
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(offsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(offsetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(offsetSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(amplitudeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(amplitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(amplitudeSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(grainPanelLayout.createSequentialGroup()
                                .addComponent(pitchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pitchSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(grainPanelLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(grainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        grainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amplitudeSlider, cloudDurationSlider, durationSlider, locationSlider, offsetSlider, pitchSlider});

        grainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amplitudeLabel, durationLabel, jLabel1, locationLabel, offsetLabel, pitchLabel});

        grainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amplitudeSetting, cloudDurationSetting, durationSetting, locationSetting, offsetSetting, pitchSetting});

        grainPanelLayout.setVerticalGroup(
            grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(grainLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(durationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationLabel, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cloudDurationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cloudDurationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pitchLabel)
                    .addComponent(pitchSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pitchSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amplitudeLabel)
                    .addComponent(amplitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amplitudeSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(offsetSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offsetLabel)
                    .addComponent(offsetSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(grainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(locationSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationLabel))
                .addGap(32, 32, 32))
        );

        grainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {amplitudeSetting, cloudDurationSetting, durationSetting, locationSetting, offsetSetting, pitchSetting});

        grainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {amplitudeSlider, cloudDurationSlider, durationSlider, locationSlider, offsetSlider, pitchSlider});

        grainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {amplitudeLabel, locationLabel, offsetLabel, pitchLabel});

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        envelopebuttonGroup.add(hannButton);
        hannButton.setText("Hann");
        hannButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hannButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(gaussianButton);
        gaussianButton.setText("Gaussian");
        gaussianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianButtonActionPerformed(evt);
            }
        });

        envelopeLabel.setText("Envelope Settings");

        envelopebuttonGroup.add(sinButton);
        sinButton.setText("Sine");
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(hammingButton);
        hammingButton.setText("Hamming");
        hammingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hammingButtonActionPerformed(evt);
            }
        });

        envelopebuttonGroup.add(adsrButton);
        adsrButton.setText("Attack Decay Sustain Release");
        adsrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adsrButtonActionPerformed(evt);
            }
        });

        applyEnvelopeButton.setText("Apply Envelope");
        applyEnvelopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyEnvelopeButtonActionPerformed(evt);
            }
        });

        adsrTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF.setEnabled(false);

        adsrTF1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF1.setEnabled(false);

        adsrTF2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF2.setEnabled(false);

        adsrTF3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        adsrTF3.setEnabled(false);

        gaussianField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        gaussianField.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(envelopeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(sinButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hannButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hammingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gaussianButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gaussianField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(applyEnvelopeButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(adsrButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adsrTF3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {adsrTF, adsrTF1, adsrTF2, adsrTF3, gaussianField});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(envelopeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sinButton)
                    .addComponent(applyEnvelopeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hannButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hammingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gaussianButton)
                    .addComponent(gaussianField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adsrButton)
                    .addComponent(adsrTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adsrTF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        statusTF.setColumns(20);
        statusTF.setRows(5);
        jScrollPane1.setViewportView(statusTF);

        buttonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0)));

        resetButton.setText("Reset Song");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        testLoadButton.setText("Load Song");
        testLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testLoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(resetButton)
                .addGap(18, 18, 18)
                .addComponent(testLoadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {resetButton, testLoadButton});

        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetButton)
                    .addComponent(testLoadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {resetButton, testLoadButton});

        fileMenu.setText("File");

        save.setText("Save - NW");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        fileMenu.add(save);

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        fileMenu.add(open);

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        fileMenu.add(quit);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

        statusTF.append("Status: Attempting to Open a .wav file.\n");

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".wav", "wav");
        fileChooser.addChoosableFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            originalSong = fileChooser.getSelectedFile();
            try {

                if (AS.status()) {
                    AS.killALData();
                    statusTF.append("Status: " + AS.getSongFileName() + " removed from the audio stream.\n");
                }
                tempSongFile = originalSong;
                AS.execute(tempSongFile);

            } catch (Exception ex) {
                System.out.println("Problem accessing file " + tempSongFile.getAbsolutePath());
                statusTF.append("Status: Problem accessing file " + tempSongFile.getAbsolutePath() + "\n");
            }

            // Convert the .wav file to a text file
            tempTxtFile = audioToTxt(tempSongFile);

            // read the text file into the sound file
            readFile(tempTxtFile, audioData);

            playButton.setEnabled(true);
            pauseButton.setEnabled(true);
            stopButton.setEnabled(true);
            // Update duration slider to song duration
            durationSlider.setMaximum((int) (audioData.samples / audioData.sampleRate));
            locationSlider.setMaximum(audioData.samples);
        } else {
            statusTF.append("Status: Open cancelled by user.\n");
            System.out.println("File access cancelled by user.");
        }


    }//GEN-LAST:event_openActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        // TODO add your handling code here:
        // Kill the song buffer if something is loaded        
        AS.killALData();
        originalSong = tempSongFile = tempTxtFile = null;
        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed

    private void durationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationSliderStateChanged
        // TODO add your handling code here:
        durationSetting.setText("" + durationSlider.getValue());
    }//GEN-LAST:event_durationSliderStateChanged

    private void amplitudeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amplitudeSliderStateChanged
        // TODO add your handling code here:
        amplitudeSetting.setText("" + amplitudeSlider.getValue());
    }//GEN-LAST:event_amplitudeSliderStateChanged

    private void pitchSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pitchSliderStateChanged
        // TODO add your handling code here:
        pitchSetting.setText("" + pitchSlider.getValue());
    }//GEN-LAST:event_pitchSliderStateChanged

    private void offsetSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSliderStateChanged
        // TODO add your handling code here:
        offsetSetting.setText("" + offsetSlider.getValue());
    }//GEN-LAST:event_offsetSliderStateChanged

    private void locationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_locationSliderStateChanged
        // TODO add your handling code here:

        locationSetting.setText("" + locationSlider.getValue());
    }//GEN-LAST:event_locationSliderStateChanged

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // Play if a song is loaded
        if (AS.status()) {
            AS.play();
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // Pause if a song is loaded
        if (AS.status()) {
            AS.pause();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // Stop if a song is loaded
        if (AS.status()) {
            AS.stop();
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        // Close song buffer if a song is loaded        
        AS.killALData();
        originalSong = tempSongFile = tempTxtFile = null;
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing


    /* void audioToTxt(String fileName)
     ------SONG MUST BE LOADED FIRST!
     */
    File audioToTxt(File file) {

        statusTF.append("Status: Attempting to convert " + file.getName() + "... ");

        String fileName = file.getName();

        fileName = fileName.substring(0, fileName.lastIndexOf("."));

        String base = System.getProperty("user.dir") + "\\src\\music\\";

        String cmd = "\"\"" + base + "wav2txt\" " + "\""
                + file.getAbsolutePath() + "\"" + " > " + "\""
                + base + fileName + ".txt" + "\"\"";

        try {
            Process p = Runtime.getRuntime().exec(
                    new String[]{"cmd.exe", "/c", cmd});
            p.waitFor();
            System.out.println("Txt file constructed: \\src\\music\\" + fileName + ".txt");
            statusTF.append("Successfuly constructed \\src\\music\\" + fileName + ".txt\n");
        } catch (IOException ex) {
            System.out.println("FAILED: " + ex.getMessage());
            statusTF.append("Failed to convert.\n");
        } catch (InterruptedException ex) {
            System.out.println("FAILED: " + ex.getMessage());
            statusTF.append("Failed to convert.\n");
        }

        File txtFile = new File(base + fileName + ".txt");
        return txtFile;

    }//End of audioToTxt

    /* void txtToAudio(String fileName)    
     */
    void txtToAudio(String fileName) {

        statusTF.append("Status: Attempting to convert " + fileName + "... ");
        fileName = fileName.substring(0, fileName.lastIndexOf("."));
        String base = System.getProperty("user.dir") + "\\src\\music\\";

        String cmd = "\"\"" + base + "txt2wav\" " + "\"" + base + fileName
                + ".wav\" < " + "\"" + base + fileName + ".txt\"\"";

        try {
            Process p = Runtime.getRuntime().exec(
                    new String[]{"cmd.exe", "/c", cmd});
            p.waitFor();
            System.out.println("Wav file constructed: \\src\\music\\" + fileName + ".wav");
            statusTF.append("Successfuly constructed \\src\\music\\" + fileName + ".wav\n");
        } catch (IOException ex) {
            System.out.println("FAILED: " + ex.getMessage());
            statusTF.append("Failed to convert.\n");
        } catch (InterruptedException ex) {
            System.out.println("FAILED: " + ex.getMessage());
            statusTF.append("Failed to convert.\n");
        }
    }//End of txtToAudio

    /* readFile(String fileName, SoundRecord record)
     */
    void readFile(File txtFile, SoundRecord record) {

        try {
            Scanner scanner = new Scanner(new File(txtFile.getAbsolutePath()));
            int count = 0;
            scanner.next();
            record.samples = scanner.nextInt();
            scanner.next();
            record.bitsPerSample = scanner.nextInt();
            scanner.next();
            record.channels = scanner.nextInt();
            scanner.next();
            record.sampleRate = scanner.nextInt();
            scanner.next();
            record.normalized = false;
            scanner.next();

            if (record.channels == 1) {
                record.channelOne = new int[record.samples];
            } else {
                record.channelOne = new int[record.samples];
                record.channelTwo = new int[record.samples];
            }

            while (scanner.hasNextInt()) {
                //  data[count] = line;
                if (record.channels == 1) {
                    int line = scanner.nextInt();
                    record.channelOne[count] = line;
                    //System.out.printf("%s %n", record.channelOne[count]);
                    count++;
                } else {

                    int line1 = scanner.nextInt();
                    record.channelOne[count] = line1;
                    int line2 = scanner.nextInt();
                    record.channelTwo[count] = line2;
                    //System.out.printf("--- %s \t %s %n",
                    //        record.channelOne[count], record.channelTwo[count]);
                    count++;
                }
            }
            scanner.close();

        } catch (FileNotFoundException e) {
            statusTF.append("Status: Error reading " + txtFile.getName() + ".\n");
            System.out.println("ERROR");
        }

    }//End of readFile

    /* outputFile(String fileName, SoundRecord record)     
     */
    void outputTxtFile(String fileName, SoundRecord record) {

        String base = System.getProperty("user.dir") + "\\src\\music\\";

        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(base + fileName));
            out.write("SAMPLES: \t" + record.channelOne.length);
            out.newLine();
            out.write("BITSPERSAMPLE: \t" + record.bitsPerSample);
            out.newLine();
            out.write("CHANNELS: \t" + record.channels);
            out.newLine();
            out.write("SAMPLERATE: \t" + record.sampleRate);
            out.newLine();
            out.write("NORMALIZED: \t" + "FALSE");
            out.newLine();
            int line1 = 0, line2 = 0;
            if (record.channels == 1) {
                for (int i = 0; i < record.channelOne.length; i++) {
                    out.write(record.channelOne[i] + "\n");
                }
            } else {
                for (int i = 0; i < record.channelOne.length; i++) {
                    line1 = record.channelOne[i];
                    line2 = record.channelTwo[i];
                    out.write(line1 + "\t");
                    out.write(line2 + "\n");
                }
            }

            out.close();
            statusTF.append("Status: Successfully created " + fileName + "\n");
            System.out.println("Successfully created " + fileName);
        } catch (IOException e) {
            statusTF.append("Status: Error outputing the file " + fileName
                    + ". \n");
            System.out.println("Error outputing the file " + fileName);
        }

    } //End of outPutFile

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:

        AS.killALData();

        try {
            AS.execute(originalSong);
            statusTF.setText("Status: Attempting to remove song from audio stream. ");
            statusTF.append("Loaded " + originalSong.getName() + "\n");
        } catch (Exception ex) {
            System.out.println("Problem accessing file " + originalSong.getAbsolutePath());
            statusTF.setText("Status: Attempting to remove song from audio stream. ");
            statusTF.append("Failed to load " + originalSong.getName() + "\n");
            return;
        }

        // Convert the .wav file to a text file
        tempTxtFile = audioToTxt(originalSong);
        // read the text file into the sound file
        readFile(tempTxtFile, audioData);
        durationSlider.setMaximum((int) (audioData.samples / audioData.sampleRate));
        locationSlider.setMaximum(audioData.samples);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void testLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testLoadButtonActionPerformed
        // TODO add your handling code here:

        AS.killALData();

        tempSongFile = originalSong = new File("src\\FancyPants.wav");
        AS.execute(tempSongFile);

        tempTxtFile = audioToTxt(tempSongFile);

        readFile(tempTxtFile, audioData);

        playButton.setEnabled(true);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
        durationSlider.setMaximum((int) (audioData.samples / audioData.sampleRate));
        locationSlider.setMaximum(audioData.samples);
    }//GEN-LAST:event_testLoadButtonActionPerformed

    private void cloudDurationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cloudDurationSliderStateChanged
        // TODO add your handling code here:
        cloudDurationSetting.setText("" + cloudDurationSlider.getValue());
    }//GEN-LAST:event_cloudDurationSliderStateChanged

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        statusTF.append("Status: Attempting to save the temporary file...");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".wav", "wav");
        fileChooser.addChoosableFileFilter(filter);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter fw = new FileWriter(fileChooser.getSelectedFile());
                String newPath = fileChooser.getSelectedFile().getAbsolutePath();
                System.out.println("File path = " + newPath);
                File tempAudio = new File(tempSongFile.getAbsolutePath());
                System.out.println("File path of tempAudio = " + tempAudio.getAbsolutePath());

                if (tempAudio.renameTo(new File(newPath))) {
                    System.out.println("File saved successful!");
                    statusTF.append("Successfully saved as " + tempAudio.getName() + "\n");
                } else {
                    System.out.println("File failed to save!");
                    statusTF.append("Failed to save.\n");
                }
            } catch (IOException ex) {
                System.out.println("File failed to save!" + ex.getMessage());
                statusTF.append("Failed to save.\n");
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void applyEnvelopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyEnvelopeButtonActionPerformed
        // TODO add your handling code here:

        // Nothing loaded
        if (!AS.status()) {
            statusTF.append("Status: No File Loaded!\n");
            return;
        }

        int type = 0;
        if (sinButton.isSelected()) {
            type = 1;
        } else if (hannButton.isSelected()) {
            type = 2;
        } else if (hammingButton.isSelected()) {
            type = 3;
        } else if (gaussianButton.isSelected()) {
            type = 4;
        } else if (adsrButton.isSelected()) {
            type = 5;
        }

        if (type == 0) { // none
            System.out.println("No envelope set");
            statusTF.append("Status: No envelope set!\n");
            return;
        }

        int eDur = durationSlider.getValue(), ePitch = pitchSlider.getValue(),
                eOffset = offsetSlider.getValue(),
                eLocation = locationSlider.getValue(),
                cloudDur = cloudDurationSlider.getValue();

        double eAmp = (amplitudeSlider.getValue() / 10) + 0.4;
        SoundRecord audio = new SoundRecord();
        audio.bitsPerSample = audioData.bitsPerSample;
        audio.channels = audioData.channels;
        audio.normalized = audioData.normalized;
        audio.samples = audioData.samples;
        //audio.sampleRate = audioData.sampleRate;
        audio.sampleRate = ePitch * 100;
        double[] envelope = null;

        double[] values = new double[4];
        switch (type) {

            case 1: // Sin
                statusTF.append("Status: Applying sin envelope...");
                envelope = es.sinEnvelope(audio);
                break;

            case 2: // Hann
                statusTF.append("Status: Applying hann envelope...");
                envelope = es.hannEnvelope(audio, eDur);
                break;
            case 3: // Hamming
                statusTF.append("Status: Applying hamm envelope...");
                envelope = es.hammEnvelope(audio, eDur);
                break;

            case 4: // Gaussian

                try {
                    values[0] = Double.parseDouble(gaussianField.getText());
                    statusTF.append("Status: Applying gaussian...");
                    envelope = es.gaussianEnvelope(audio, 2, values[0]);
                } catch (NumberFormatException ex) {
                    return;
                }

                break;

            case 5: // ADSR
                try {
                    values[0] = Double.parseDouble(adsrTF.getText());
                    values[1] = Double.parseDouble(adsrTF1.getText());
                    values[2] = Double.parseDouble(adsrTF2.getText());
                    values[3] = Double.parseDouble(adsrTF3.getText());
                    statusTF.append("Status: Applying ADSR envelope...");
                    envelope = es.adsrEnvelope(audio, 2, values[0], values[1],
                            values[2], values[3]);
                } catch (NumberFormatException ex) {
                    return;
                }
                break;
        }

        audio.channelOne = new int[audio.samples];
        audio.channelTwo = new int[audio.samples];

        //Copy over existing audio data
        for (int i = 0; i < audio.samples; i++) {
            audio.channelOne[i] = audioData.channelOne[i];
            if (audio.channels == 2) {
                audio.channelTwo[i] = audioData.channelTwo[i];
            }
        }

        // Apply the envelope values to a text file and then create the wav file
        // phaseShift = eLocation;
        int counter;
        int maxFreq = 0;
        for (int x = eLocation; x < cloudDur + eLocation; x += eOffset) {
            counter = x;
            for (int i = 0; i < envelope.length; i++) {

                if (counter == audio.samples) {
                    counter = 0;
                }
                audio.channelOne[counter] = (int) (audioData.channelOne[counter] * envelope[i]);
                audio.channelOne[counter] = (int) (audio.channelOne[counter] * eAmp);
                if (audio.channelOne[counter] > maxFreq) {
                    maxFreq = audio.channelOne[counter];
                }
                if (audio.channels == 2) {
                    audio.channelTwo[counter] = (int) (audioData.channelTwo[counter] * envelope[i]);
                    audio.channelTwo[counter] = (int) (audio.channelTwo[counter] * eAmp);
                    if (audio.channelTwo[counter] > maxFreq) {
                        maxFreq = audio.channelTwo[counter];
                    }
                }
                counter++;
            }
        }

        if (maxFreq * 2 > audio.sampleRate) {
            audio.sampleRate = maxFreq * 2;
        }

        statusTF.append("Envelope Applied!\n");

        String tempText = AS.getSongFileName();
        if (tempText.substring(0, 8).equals("Altered.")) {
            tempText = tempText.substring(8);
        }
        tempText = "Altered." + tempText;
        tempText = tempText.substring(0, tempText.lastIndexOf("."));

        outputTxtFile(tempText + ".txt", audio);
        txtToAudio(tempText + ".txt");

        //Load it
        AS.killALData();
        tempSongFile = new File("src\\Music\\" + tempText + ".wav");
        AS.execute(tempSongFile);
        statusTF.append("Status: " + AS.getSongFileName() + " loaded into the audio stream.");
    }//GEN-LAST:event_applyEnvelopeButtonActionPerformed

    private void adsrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adsrButtonActionPerformed
        // TODO add your handling code here:
        // Enable text

        // ADSR
        adsrTF.setEnabled(true);
        adsrTF1.setEnabled(true);
        adsrTF2.setEnabled(true);
        adsrTF3.setEnabled(true);

        // Disable other texts
        // Gaussian
        gaussianField.setEnabled(false);
    }//GEN-LAST:event_adsrButtonActionPerformed

    private void hammingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hammingButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes

        // Gaussian
        gaussianField.setEnabled(false);
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
    }//GEN-LAST:event_hammingButtonActionPerformed

    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // Gaussian
        gaussianField.setEnabled(false);

        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
    }//GEN-LAST:event_sinButtonActionPerformed

    private void gaussianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianButtonActionPerformed
        // TODO add your handling code here:
        // Gaussian
        gaussianField.setEnabled(true);

        // Disbale text fields for other envelopes
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
    }//GEN-LAST:event_gaussianButtonActionPerformed

    private void hannButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hannButtonActionPerformed
        // TODO add your handling code here:
        // Disbale text fields for other envelopes
        // Gaussian
        gaussianField.setEnabled(false);
        // ADSR
        adsrTF.setEnabled(false);
        adsrTF1.setEnabled(false);
        adsrTF2.setEnabled(false);
        adsrTF3.setEnabled(false);
    }//GEN-LAST:event_hannButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUIFrame().setVisible(true);

            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JRadioButton adsrButton;
    private javax.swing.JFormattedTextField adsrTF;
    private javax.swing.JFormattedTextField adsrTF1;
    private javax.swing.JFormattedTextField adsrTF2;
    private javax.swing.JFormattedTextField adsrTF3;
    private javax.swing.JLabel amplitudeLabel;
    private javax.swing.JTextField amplitudeSetting;
    private javax.swing.JSlider amplitudeSlider;
    private javax.swing.JButton applyEnvelopeButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JTextField cloudDurationSetting;
    private javax.swing.JSlider cloudDurationSlider;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JTextField durationSetting;
    private javax.swing.JSlider durationSlider;
    private javax.swing.JLabel envelopeLabel;
    private javax.swing.ButtonGroup envelopebuttonGroup;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton gaussianButton;
    private javax.swing.JFormattedTextField gaussianField;
    private javax.swing.JLabel grainLabel;
    private javax.swing.JPanel grainPanel;
    private javax.swing.JRadioButton hammingButton;
    private javax.swing.JRadioButton hannButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationSetting;
    private javax.swing.JSlider locationSlider;
    private javax.swing.JLabel offsetLabel;
    private javax.swing.JTextField offsetSetting;
    private javax.swing.JSlider offsetSlider;
    private javax.swing.JMenuItem open;
    private javax.swing.JButton pauseButton;
    private javax.swing.JLabel pitchLabel;
    private javax.swing.JTextField pitchSetting;
    private javax.swing.JSlider pitchSlider;
    private javax.swing.JButton playButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quit;
    private javax.swing.JButton resetButton;
    private javax.swing.JMenuItem save;
    private javax.swing.JRadioButton sinButton;
    private javax.swing.JTextArea statusTF;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton testLoadButton;
    // End of variables declaration//GEN-END:variables
}
